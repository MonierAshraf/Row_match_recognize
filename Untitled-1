• Comprehensive Test Coverage:
While you have tests in tests/test_ast.py and tests/test_parser.py, ensure these tests cover a wide range of scenarios—including edge cases such as:

Empty matches and unmatched rows in the MATCH_RECOGNIZE clause.
Complex pattern expressions with nested functions or unconventional whitespace.
Error conditions where clauses are missing or incorrectly formed.
This will help verify that every aspect of your parsing and AST generation behaves as expected.

Summary of Enhancements
Token Cleanup: Enhance regex to capture all pattern constructs and clean tokens more thoroughly.
Error Reporting: Improve error messages with more context and consider structured logging.
Code Modularity: Split functionality into dedicated modules and add comprehensive unit tests.
Additional Validations: Add checks for exclusion syntax, grouping, and consistency of navigation/aggregate function arguments.
SELECT Clause Parsing: Integrate a more robust parser for the SELECT clause and provide detailed error messages.
Documentation: Enrich code comments and provide usage examples.






Fix Nested Navigation - Resolve the NULL handling issues in PREV(FIRST()) and similar constructs

Complete ALL ROWS PER MATCH Modifiers - Add tests for:

ALL ROWS PER MATCH SHOW EMPTY MATCHES
ALL ROWS PER MATCH OMIT EMPTY MATCHES
ALL ROWS PER MATCH WITH UNMATCHED ROWS
Expand PERMUTE Testing - Create a comprehensive test that shows all permutations working

Ensure Empty Match Semantics - Verify that empty matches follow the specification:

All column references return null
Navigation operations return null
CLASSIFIER returns null
MATCH_NUMBER returns sequential match number
Aggregate functions evaluate over empty set